{"version":3,"sources":["components/WebCam.js","App.js","serviceWorker.js","index.js"],"names":["WebCamera","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","screenshot","webcam","getScreenshot","screenshots","state","unshift","setState","tab","inherits","createClass","key","value","_this2","_renderScreenShots","map","item","react_default","a","createElement","Grid_default","container","spacing","ButtonBase_default","style","width","height","margin","display","maxWidth","maxHeight","alt","src","xs","sm","direction","Typography_default","gutterBottom","variant","color","cursor","Paper_default","padding","md","react_webcam_default","audio","ref","node","Button_default","onClick","marginRight","Camera_default","marginLeft","Send_default","length","Component","App","WebCam_WebCamera","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7b947f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Webcam from \"react-webcam\";\nimport Grid from '@material-ui/core/Grid';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport CreateIcon from '@material-ui/icons/Send';\nimport CameraIcon from '@material-ui/icons/Camera';\nimport Paper from '@material-ui/core/Paper';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport Typography from '@material-ui/core/Typography';\n\n\nexport class WebCamera extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      screenshots: [],\n      tab: 0\n    };\n  }\n  handleClick = () => {\n    const screenshot = this.webcam.getScreenshot();\n    const screenshots = this.state.screenshots;\n    screenshots.unshift(screenshot)\n    this.setState({ screenshots });\n  }\n  render() {\n    const _renderScreenShots = this.state.screenshots.map((item) => {\n      return (<Grid container spacing={16}>\n        <Grid item>\n          <ButtonBase style={{\n            width: 200,\n            height: 200,\n          }}>\n            {item ? <img style={{\n              margin: 'auto',\n              display: 'block',\n              maxWidth: '100%',\n              maxHeight: '100%',\n            }} alt=\"complex\" src={item} /> : null}\n          </ButtonBase>\n        </Grid>\n        <Grid item xs={12} sm container>\n          <Grid item xs container direction=\"column\" spacing={16}>\n            <Grid item xs>\n              <Typography gutterBottom variant=\"subtitle1\">\n                Captura\n              </Typography>\n              <Typography gutterBottom>Tiempo de ejecuci√≥n</Typography>\n              <Typography color=\"textSecondary\">ID: 1030114</Typography>\n            </Grid>\n            <Grid item>\n              <Typography style={{ cursor: 'pointer' }}>Eliminar</Typography>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"subtitle1\">2 tiros</Typography>\n          </Grid>\n        </Grid>\n      </Grid>)\n    })\n\n\n    return (\n      <div>\n        <Paper style={{\n          padding: 10,\n          margin: 'auto',\n          maxWidth: 500,\n        }}>\n          <Grid container>\n            <Grid item xs={12} md={12}>\n              <Webcam\n                audio={false}\n                width='100%'\n                height='100%'\n                ref={node => this.webcam = node}\n              />\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <Button onClick={this.handleClick} variant=\"contained\" color=\"primary\" style={{\n                marginRight: '20'\n              }}>\n                Capturar\n            <CameraIcon style={{\n                  marginLeft: '10'\n                }} />\n              </Button>\n              <Button onClick={this.handleClick} variant=\"contained\" color=\"primary\" style={{\n                marginRight: '20'\n              }}>\n                Enviar\n            <CreateIcon style={{\n                  marginLeft: '10'\n                }} />\n              </Button>\n            </Grid>\n\n          </Grid>\n\n        </Paper>\n\n        {this.state.screenshots && this.state.screenshots.length > 0 ?\n          <Paper style={{\n            padding: 10,\n            margin: 'auto',\n            maxWidth: 500,\n          }}>\n            {_renderScreenShots}\n\n          </Paper> : null}\n\n      </div>\n\n    );\n  }\n}","import React, { Component } from 'react';\n\nimport { WebCamera } from './components/WebCam'\nclass App extends Component {\n  render() {\n    return (\n      <WebCamera></WebCamera>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}